AWSTemplateFormatVersion: "2010-09-09"
Description: CICD pipelines to automate SDLF workflows

Parameters:
  pEnvironment:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Misc/pEnv
  pSharedDevOpsAccountId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Misc/DevOpsAccountId
  pCicdRepository:
    Type: String
    Default: sdlf-cicd
  pFoundationsRepository:
    Type: String
    Default: sdlf-foundations
  pTeamRepository:
    Type: String
    Default: sdlf-team
  pPipelineRepository:
    Type: String
    Default: sdlf-pipeline
  pDatasetRepository:
    Type: String
    Default: sdlf-dataset
  pCicdRepository:
    Type: String
    Default: sdlf-cicd
  pSharedDevOpsAccountKmsKeyArn:
    Description: Arn of the KMS key in the Shared DevOps account
    Type: String
  pArtifactsBucket:
    Description: The artifactory bucket used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/CFNBucket
  pEventBridgeRepositoryTriggerRoleArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/IAM/EventBridgeRepositoryTriggerRoleArn
  pDatalakeLibraryRepositoryName:
    Description: Name of the repository containing the code for the Datalake Library.
    Type: String
    Default: sdlf-datalakeLibrary
  pDatalakeLibsLambdaLayerName:
    Description: Name to give the Lambda Layer containing the Datalake Library.
    Type: String
    Default: datalake-lib-layer
  pDefaultPipLibrariesLambdaLayerName:
    Description: Name to give the Lambda Layer containing the libraries installed through Pip.
    Type: String
    Default: default-pip-libraries
  pLibrariesBranchName:
    Description: Name of the default branch for Python libraries
    Type: String
    Default: master
  pMinTestCoverage:
    Description: "[OPTIONAL] The minimum code coverage percentage that is required for the pipeline to proceed to the next stage. Specify only if `pEnforceCodeCoverage` is set to 'true'."
    Type: String
    Default: 80
  pPipLibrariesRepositoryName:
    Description: The repository containing requirements.txt
    Type: String
    Default: sdlf-pipLibrary
  pRunCodeCoverage:
    Description: "Creates code coverage reports from the unit tests included in `pDatalakeLibraryRepositoryName`. Enforces the minimum threshold specified in `pMinTestCoverage`"
    Type: String
    AllowedValues: ["false", "true"]
    Default: "false"

Mappings:
  pCodeCommitBranch:
    dev:
      branch: dev
    test:
      branch: test
    prod:
      branch: master

Conditions:
  RunUnitTestingStage: !Equals
    - !Ref pRunCodeCoverage
    - "true"
  NotRunUnitTestingStage: !Not
    - Condition: RunUnitTestingStage

Resources:
  rCloudFormationModuleInfrastructure:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./nested-stacks/template-cicd-cfn-module.yaml
      Parameters:
        pArtifactsBucket: /SDLF/S3/CFNBucket
        pSharedDevOpsAccountKmsKeyArn: !Ref pSharedDevOpsAccountKmsKeyArn

  ######## IAM #########
  rCodePipelineRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F38
            reason: Condition Applied
    Properties:
      RoleName: sdlf-cicd-cfn-mod-codepipeline
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-cfn-mod-codepipeline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - lambda.amazonaws.com
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/EMR*
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
              - Effect: Allow
                Action:
                  - iam:CreateRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-*
              - Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-*
                Condition:
                  ArnEquals:
                    iam:PolicyARN:
                      - !Sub arn:aws:iam::${AWS::AccountId}:policy/sdlf-*
              - Effect: Allow
                Action:
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                  - iam:UntagRole
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                  - iam:TagRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-*
              - Effect: Allow
                Action:
                  - iam:ListPolicies
                  - iam:ListPolicyVersions
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:policy/*
              - Effect: Allow
                Action:
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:DeletePolicy
                  - iam:DeletePolicyVersion
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:policy/sdlf-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:policy/state-machine/sdlf-*
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-*
              - Effect: Allow
                Action:
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/sdlf-*
              - Effect: Allow
                Action:
                  - lambda:GetLayerVersion
                  - lambda:ListFunctions
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:CreateAlias
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:DeleteFunctionConcurrency
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:InvokeFunction
                  - lambda:ListTags
                  - lambda:PublishVersion
                  - lambda:PutFunctionConcurrency
                  - lambda:RemovePermission
                  - lambda:TagResource
                  - lambda:UntagResource
                  - lambda:UpdateAlias
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-foundations-rKibana*
              - Effect: Allow
                Action:
                  - lambda:CreateEventSourceMapping
                  - lambda:DeleteEventSourceMapping
                  - lambda:GetEventSourceMapping
                  - lambda:UpdateEventSourceMapping
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-*
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/*
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:CreateProject
                  - codebuild:StartBuild
                  - codebuild:UpdateProject
                Resource:
                  - !GetAtt [rCloudFormationModuleInfrastructure, Outputs.oBuildCloudformationModuleStageArn]
                  - !GetAtt rBuildDeployDatalakeLibraryLayer.Arn
                  - !GetAtt rBuildDeployRequirementsLayer.Arn
              - Effect: Allow
                Action:
                  - states:CreateActivity
                  - states:CreateStateMachine
                  - states:ListActivities
                  - states:ListStateMachines
                  - states:TagResource
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - states:DeleteStateMachine
                  - states:DescribeStateMachine
                  - states:DescribeStateMachineForExecution
                  - states:UpdateStateMachine
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-*
              - Effect: Allow
                Action:
                  - states:DescribeActivity
                  - states:DeleteActivity
                  - states:GetActivityTask
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:activity:sdlf-*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:DeleteLogGroup
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:TagLogGroup
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-*:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*:log-stream:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-*
              - Effect: Allow
                Action:
                  - sqs:ListQueues
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - sqs:AddPermission
                  - sqs:ChangeMessageVisibility
                  - sqs:ChangeMessageVisibilityBatch
                  - sqs:CreateQueue
                  - sqs:DeleteQueue
                  - sqs:GetQueueAttributes
                  - sqs:SetQueueAttributes
                  - sqs:TagQueue
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-*
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetEncryptionConfiguration
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBuckets
                  - s3:ListObjectsV2
                  - s3:PutBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutBucketPolicy
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:PutObject
                  - s3:SetBucketEncryption
                Resource:
                  - !Sub arn:aws:s3:::${pArtifactsBucket}
                  - !Sub arn:aws:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - ssm:AddTagsToResource
                  - ssm:DescribeParameters
                  - ssm:GetOpsSummary
                  - ssm:GetParameter
                  - ssm:GetParameterHistory
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:ListTagsForResource
                  - ssm:RemoveTagsFromResource
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
              - Effect: Allow
                Action:
                  - ssm:DeleteParameter
                  - ssm:PutParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !Ref pSharedDevOpsAccountKmsKeyArn
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}

  rFoundationsStateMachinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pFoundationsRepository
                BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                PollForSourceChanges: false
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: Build
              InputArtifacts:
              - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !GetAtt [rCloudFormationModuleInfrastructure, Outputs.oBuildCloudformationModuleStageArn]
                EnvironmentVariables: '[{"name":"MODULE_NAME", "value":"foundations", "type":"PLAINTEXT"}]'
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  rFoundationsStateMachineTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Run Foundations State Machine on ${pFoundationsRepository} repository update"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pFoundationsRepository}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - dev
            - test
            - master
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rFoundationsStateMachinePipeline}
          Id: !Sub sdlf-${pFoundationsRepository}-trigger
          RoleArn: !Ref pEventBridgeRepositoryTriggerRoleArn

  rTeamStateMachinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pTeamRepository
                BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                PollForSourceChanges: false
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: Build
              InputArtifacts:
              - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !GetAtt [rCloudFormationModuleInfrastructure, Outputs.oBuildCloudformationModuleStageArn]
                EnvironmentVariables: '[{"name":"MODULE_NAME", "value":"team", "type":"PLAINTEXT"}]'
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  rTeamStateMachineTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Run Team State Machine on ${pTeamRepository} repository update"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pTeamRepository}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - dev
            - test
            - master
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rTeamStateMachinePipeline}
          Id: !Sub sdlf-${pTeamRepository}-trigger
          RoleArn: !Ref pEventBridgeRepositoryTriggerRoleArn

  rPipelineStateMachinePipeline: # and that's why it cannot be here. own cicd module? cicd-pipeline? as we add pipeline to every stage TODO
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pPipelineRepository
                BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                PollForSourceChanges: false
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: Build
              InputArtifacts:
              - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !GetAtt [rCloudFormationModuleInfrastructure, Outputs.oBuildCloudformationModuleStageArn]
                EnvironmentVariables: '[{"name":"MODULE_NAME", "value":"pipeline", "type":"PLAINTEXT"}]'
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  rPipelineStateMachineTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Run Pipeline State Machine on ${pPipelineRepository} repository update"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:${pPipelineRepository}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - dev
            - test
            - master
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rPipelineStateMachinePipeline}
          Id: !Sub sdlf-${pPipelineRepository}-trigger
          RoleArn: !Ref pEventBridgeRepositoryTriggerRoleArn

  rDatasetStateMachinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pDatasetRepository
                BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                PollForSourceChanges: false
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: Build
              InputArtifacts:
              - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !GetAtt [rCloudFormationModuleInfrastructure, Outputs.oBuildCloudformationModuleStageArn]
                EnvironmentVariables: '[{"name":"MODULE_NAME", "value":"dataset", "type":"PLAINTEXT"}]'
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  rDatasetStateMachineTriggerEventRule: # TODO this is not a state machine, remove from name..
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Run Dataset State Machine on ${pDatasetRepository} repository update"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:${pDatasetRepository}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - dev
            - test
            - master
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rDatasetStateMachinePipeline}
          Id: !Sub sdlf-${pDatasetRepository}-trigger
          RoleArn: !Ref pEventBridgeRepositoryTriggerRoleArn

  rStageAStateMachinePipeline:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - rCodePipelineRoleSsm
      - rCloudFormationModuleInfrastructure
    Properties:
      TemplateURL: ./nested-stacks/template-stage-statemachine.yaml
      Parameters:
        pStageRepository: sdlf-stageA
        pStageName: stageA
        pSharedDevOpsAccountKmsKeyArn: !Ref pSharedDevOpsAccountKmsKeyArn
        pEventBridgeRepositoryTriggerRoleArn: /SDLF/IAM/EventBridgeRepositoryTriggerRoleArn

  rStageBStateMachinePipeline:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - rCodePipelineRoleSsm
      - rCloudFormationModuleInfrastructure
    Properties:
      TemplateURL: ./nested-stacks/template-stage-statemachine.yaml
      Parameters:
        pStageRepository: sdlf-stageB
        pStageName: stageB
        pSharedDevOpsAccountKmsKeyArn: !Ref pSharedDevOpsAccountKmsKeyArn
        pEventBridgeRepositoryTriggerRoleArn: /SDLF/IAM/EventBridgeRepositoryTriggerRoleArn

  rStageCicdStateMachinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pCicdRepository
                BranchName: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                PollForSourceChanges: false
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: Build
              InputArtifacts:
              - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !GetAtt [rCloudFormationModuleInfrastructure, Outputs.oBuildCloudformationModuleStageArn]
                EnvironmentVariables: '[{"name":"MODULE_NAME", "value":"stagecicd", "type":"PLAINTEXT"}]'
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  rStageCicdStateMachineTriggerEventRule: # TODO this is not a state machine, remove from name..
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Run Stage CICD State Machine on ${pCicdRepository} repository update"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:${pCicdRepository}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - dev
            - test
            - master
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rStageCicdStateMachinePipeline}
          Id: !Sub sdlf-${pCicdRepository}-trigger
          RoleArn: !Ref pEventBridgeRepositoryTriggerRoleArn

  ######## LAMBDA LAYERS ########
  rCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sdlf-codebuild
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action: codecommit:GitPull
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !Ref pSharedDevOpsAccountKmsKeyArn

  rCodeBuildPublishLayerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sdlf-codebuild-publish-layer
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt rCodeBuildServiceRole.Arn
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-codebuild-publish-layer
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:PublishLayerVersion
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:sdlf-*
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Update*
                  - dynamodb:Put*
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
              - Effect: Allow
                Action:
                  - ssm:AddTagsToResource
                  - ssm:DescribeParameters
                  - ssm:GetOpsSummary
                  - ssm:GetParameter
                  - ssm:GetParameterHistory
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:ListTagsForResource
                  - ssm:RemoveTagsFromResource
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Lambda/*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetBucketVersioning
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${pArtifactsBucket}
                  - !Sub arn:aws:s3:::${pArtifactsBucket}/*

  rBuildDeployDatalakeLibraryLayer:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub sdlf-${pDatalakeLibsLambdaLayerName}
      Artifacts:
        Type: CODEPIPELINE
      Description: Creates a Lambda Layer with the repository provided
      EncryptionKey: !Ref pSharedDevOpsAccountKmsKeyArn
      Environment:
        EnvironmentVariables:
          - Name: LAYER_NAME
            Type: PLAINTEXT
            Value: !Ref pDatalakeLibsLambdaLayerName
          - Name: LAMBDA_PUBLISHING_ROLE
            Type: PLAINTEXT
            Value: !GetAtt rCodeBuildPublishLayerRole.Arn
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      ServiceRole: !GetAtt rCodeBuildServiceRole.Arn
      Source:
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.9
            build:
              commands:
                - ls && echo "-----> making artifactory directory"
                - mkdir artifacts
                - zip -r artifacts/datalake_library.zip ./python -x \*__pycache__\*
                - account_id=$(aws sts get-caller-identity | jq .Account)
                - temp_role=$(aws sts assume-role --role-arn $LAMBDA_PUBLISHING_ROLE --role-session-name "codebuild-lambda-layer")
                - export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                - export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                - export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                - layer=$(aws lambda publish-layer-version --layer-name sdlf-$LAYER_NAME --description "Contains the latest version of datalake_library" --compatible-runtimes "python3.9" --zip-file fileb://./artifacts/datalake_library.zip)
                - latest_layer_version=$(echo $layer | jq -r .LayerVersionArn)
                - aws ssm put-parameter --name "/SDLF/Lambda/LatestDatalakeLibraryLayer" --value $latest_layer_version --type String --overwrite
        Type: CODEPIPELINE
      TimeoutInMinutes: 20

  rBuildDeployRequirementsLayer:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Name: !Sub sdlf-${pDefaultPipLibrariesLambdaLayerName}
      Description: Creates a Lambda Layer containing the libraries and version numbers listed in the requirements.txt file in the repository provided
      EncryptionKey: !Ref pSharedDevOpsAccountKmsKeyArn
      Environment:
        EnvironmentVariables:
          - Name: LAYER_NAME
            Type: PLAINTEXT
            Value: !Ref pDefaultPipLibrariesLambdaLayerName
          - Name: LAMBDA_PUBLISHING_ROLE
            Type: PLAINTEXT
            Value: !GetAtt rCodeBuildPublishLayerRole.Arn
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      ServiceRole: !GetAtt rCodeBuildServiceRole.Arn
      Source:
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.9
              commands:
                - pip3 install boto3
            build:
              commands:
                - temp_role=$(aws sts assume-role --role-arn $LAMBDA_PUBLISHING_ROLE --role-session-name "codebuild-lambda-layer")
                - export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                - export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                - export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                - echo ">>>>> Beginning build of subdirectories >>>>>"
                - bash build.sh
                - echo ">>>>> Beginning build of default layer >>>>>"
                - ls && echo "-----> making temporary directory"
                - mkdir -p layer/python
                - pip3 -q install -r ./requirements.txt -t layer/python
                - cd layer/
                - zip -r layer.zip python/ -x \*__pycache__\*
                - echo "Uploading default Lambda Layer..."
                - layer=$(aws lambda publish-layer-version --layer-name sdlf-$LAYER_NAME --description "Contains a default Pip library layer" --compatible-runtimes "python3.9" --zip-file fileb://./layer.zip)
                - latest_layer_version=$(echo $layer | jq -r .LayerVersionArn)
                - aws ssm put-parameter --name "/SDLF/Lambda/LatestDefaultPipLibraryLayer" --value $latest_layer_version --type String --overwrite
        Type: CODEPIPELINE
      TimeoutInMinutes: 20

  rCommonPipLibs:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: rDatalakePipelineTriggerRule
    Properties:
      Name: !Sub sdlf-${pDefaultPipLibrariesLambdaLayerName}
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pPipLibrariesRepositoryName
                BranchName: !Ref pLibrariesBranchName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref rBuildDeployRequirementsLayer
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  rDatalakePipelineTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub sdlf-${pDatalakeLibsLambdaLayerName}-trigger
      Description: "Trigger team Data Lake Library pipeline"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:${pDatalakeLibraryRepositoryName}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref pLibrariesBranchName
      Targets:
        - Arn:
            !If [
              NotRunUnitTestingStage,
              !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rCommonDatalakeLibs}",
              !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rCommonDatalakeTestLibs}",
            ]
          Id: !Sub sdlf-${pDatalakeLibsLambdaLayerName}-trigger
          RoleArn: !Ref pEventBridgeRepositoryTriggerRoleArn

  # rDatalakePipelineFailedRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Name: !Sub sdlf-${pDatalakeLibsLambdaLayerName}-failure
  #     Description: "Notify team of Data Lake Library pipeline failure"
  #     EventPattern:
  #       source:
  #         - aws.codepipeline
  #       detail-type:
  #         - CodePipeline Pipeline Execution State Change
  #       detail:
  #         state:
  #           - FAILED
  #         pipeline:
  #           - !If [
  #               NotRunUnitTestingStage,
  #               !Ref rCommonDatalakeLibs,
  #               !Ref rCommonDatalakeTestLibs,
  #             ]
  #     State: ENABLED
  #     Targets:
  #       - Arn: !Ref rSNSTopic
  #         Id: !Sub sdlf-${pDatalakeLibsLambdaLayerName}-failure
  #         InputTransformer:
  #           InputTemplate:
  #             !If [
  #               NotRunUnitTestingStage,
  #               !Sub '"The Pipeline <pipeline> has failed. Go to https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${rCommonDatalakeLibs}"',
  #               !Sub '"The Pipeline <pipeline> has failed. Go to https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${rCommonDatalakeTestLibs}"',
  #             ]
  #           InputPathsMap:
  #             pipeline: $.detail.pipeline

  rPipPipelineTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub sdlf-${pDefaultPipLibrariesLambdaLayerName}-trigger
      Description: "Trigger team Pip Library pipeline"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:${pPipLibrariesRepositoryName}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref pLibrariesBranchName
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rCommonPipLibs}
          Id: !Sub sdlf-${pDefaultPipLibrariesLambdaLayerName}-trigger
          RoleArn: !Ref pEventBridgeRepositoryTriggerRoleArn

  # rPipPipelineFailedRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Name: !Sub sdlf-${pDefaultPipLibrariesLambdaLayerName}-failure
  #     Description: "Notify admin team of Pip Library pipeline failure"
  #     EventPattern:
  #       source:
  #         - aws.codepipeline
  #       detail-type:
  #         - CodePipeline Pipeline Execution State Change
  #       detail:
  #         state:
  #           - FAILED
  #         pipeline:
  #           - !Ref rCommonPipLibs
  #     State: ENABLED
  #     Targets:
  #       - Arn: !Ref rSNSTopic
  #         Id: !Sub sdlf-${pDefaultPipLibrariesLambdaLayerName}-failure
  #         InputTransformer:
  #           InputTemplate: !Sub '"The Pipeline <pipeline> has failed. Go to https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${rCommonPipLibs}"'
  #           InputPathsMap:
  #             pipeline: $.detail.pipeline

  ######## LAMBDA LAYER PIPELINE #########
  rCommonDatalakeLibs:
    Type: AWS::CodePipeline::Pipeline
    Condition: NotRunUnitTestingStage
    Properties:
      Name: !Sub sdlf-${pDatalakeLibsLambdaLayerName}
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pDatalakeLibraryRepositoryName
                BranchName: !Ref pLibrariesBranchName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref rBuildDeployDatalakeLibraryLayer
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  rCommonDatalakeTestLibs:
    Type: AWS::CodePipeline::Pipeline
    Condition: RunUnitTestingStage
    Properties:
      Name: !Sub sdlf-${pDatalakeLibsLambdaLayerName}-test
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-module-codecommit-${pEnvironment}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref pDatalakeLibraryRepositoryName
                BranchName: !Ref pLibrariesBranchName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Test
          Actions:
            - Name: Test
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref rTeamUnitTestCodeBuildProject
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref rBuildDeployDatalakeLibraryLayer
              RunOrder: 1
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Ref pSharedDevOpsAccountKmsKeyArn
          Type: KMS
        Location: !Ref pArtifactsBucket

  ######## CODEBUILD JOBS #########
  rTeamUnitTestCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Condition: RunUnitTestingStage
    Properties:
      Name: sdlf-cicd-unit-test-coverage
      Artifacts:
        Type: CODEPIPELINE
      EncryptionKey: !Ref pSharedDevOpsAccountKmsKeyArn
      Environment:
        EnvironmentVariables:
          - Name: COV_PERCENT
            Type: PLAINTEXT
            Value: !Ref pMinTestCoverage
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt rCodeBuildServiceRole.Arn
      TimeoutInMinutes: 20
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.9
            build:
              commands:
                - DIR=$CODEBUILD_SRC_DIR/python/datalake_library
                - min_coverage=$COV_PERCENT
                - pip install -r $DIR/requirements.txt
                - |-
                    for filename in $(find "$DIR" -name 'test*.py');
                      do
                          [ -e "$filename" ] || continue;
                          pname=$(dirname "$filename");
                          fbname=$(basename "$filename");
                          if [ -f $pname/requirements.txt ]; then
                              echo "Installing package specific dependencies...";
                              pip install -r $pname/requirements.txt;
                          fi
                          cov_output="$pname/coverage_report.txt";
                          code=$(echo $fbname | cut -d _ -f 2-);
                          package=$(find $DIR -name $code | xargs dirname);
                          python3 -m pytest "$filename" --cov-report term --cov=$package --cov-fail-under $min_coverage -x
                      done
          artifacts:
            files:
              - "*"
              - "**/*"

  ######## SSM OUTPUTS #########
  rCodePipelineRoleSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/CodeBuild/CodePipelineRole
      Type: String
      Value: !GetAtt rCodePipelineRole.Arn
      Description: Code Pipeline role ARN

  rDatalakeLibraryLayerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/Lambda/LatestDatalakeLibraryLayer
      Type: String
      Value: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${pDatalakeLibsLambdaLayerName}:1
      Description: The ARN of the latest version of the Datalake Library layer
  rPipLibrariesLayerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/Lambda/LatestDefaultPipLibraryLayer
      Type: String
      Value: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${pDefaultPipLibrariesLambdaLayerName}:1
      Description: The ARN of the latest version of the Lambda Layer containing the Pip libraries
  rBuildDeployDatalakeLibraryLayerSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/CodeBuild/BuildDeployDatalakeLibraryLayer
      Type: String
      Value: !Ref rBuildDeployDatalakeLibraryLayer
      Description: Name of the CodeBuild job that packages the Datalake Libs into a Lambda Layer
