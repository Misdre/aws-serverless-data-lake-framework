AWSTemplateFormatVersion: "2010-09-09"
Description: CICD to automatically deploy pipelines and datasets from a team

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pCFNBucket:
    Description: The CloudFormation bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/CFNBucket}}"
  pOrganizationName:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pApplicationName:
    Description: Name of the application
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pApp}}"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pArtifactsBucket:
    Description: The artifactory bucket used by CodeBuild and CodePipeline
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/ArtifactsBucket}}"
  pSharedDevOpsAccountId:
    Description: Shared DevOps Account Id
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/DevOpsAccountId}}"
  pTeamName:
    Description: Name of the team (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,12}"
  pTeamMainRepository:
    Type: String
    Default: sdlf-engineering-main

Mappings:
  pCodeCommitBranch:
    dev:
      branch: dev
    test:
      branch: test
    prod:
      branch: master

Conditions:
  IsProduction: !Equals
    - !Ref pEnvironment
    - "prod"

Resources:
  ######## CODEPIPELINE: DEPLOY A NEW TEAM #########
  rLambdaCodeBuildTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-dynamodb-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-dynamodb-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Pipelines-${pEnvironment}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Datasets-${pEnvironment}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:DeleteLogGroup
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:TagLogGroup
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pTeamName}-*:log-stream:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Pipelines/${pTeamName}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Datasets/${pTeamName}
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: "*"

  rPipelinesDynamodbLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub Creates/updates DynamoDB entries for ${pTeamName} pipelines
      FunctionName: !Sub sdlf-${pTeamName}-pipelines-dynamodb
      Handler: index.lambda_handler
      MemorySize: 192
      Role: !GetAtt rLambdaCodeBuildTriggerRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          TEAM_NAME: !Ref pTeamName
          ENVIRONMENT: !Ref pEnvironment
      Code:
        ZipFile: |
          import logging
          import os

          import boto3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.client("dynamodb")
          ssm = boto3.client("ssm")
          codepipeline = boto3.client("codepipeline")

          def delete_dynamodb_pipeline_entry(table_name, team_name, pipeline_name, stage_name):
              response = dynamodb.delete_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{pipeline_name}-{stage_name}"}},
              )
              return response


          def create_dynamodb_pipeline_entry(
              table_name, team_name, pipeline_name, stage_name, entrypoint
          ):
              response = dynamodb.update_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{pipeline_name}-{stage_name}"}},
                  ExpressionAttributeNames={
                      "#T": "type",
                      "#S": "status",
                      "#EP": "entrypoint",
                      "#V": "version",
                  },
                  ExpressionAttributeValues={
                      ":t": {
                          "S": "TRANSFORMATION",
                      },
                      ":s": {"S": "ACTIVE"},
                      ":ep": {"S": entrypoint},
                      ":v": {"N": "1"},
                  },
                  UpdateExpression="SET #T = :t, #S = :s, #EP = :ep, #V = :v",
                  ReturnValues="UPDATED_NEW",
              )
              return response


          def lambda_handler(event, context):
              try:
                  environment = os.getenv("ENVIRONMENT")
                  team_name = os.getenv("TEAM_NAME")
                  table = f"octagon-Pipelines-{environment}"

                  paginator = ssm.get_paginator("get_parameters_by_path")
                  stages_pages = paginator.paginate(
                      Path=f"/SDLF/Pipelines/{team_name}",
                      Recursive=True,
                      PaginationConfig={"MaxItems": 30},
                  )
                  for stages_page in stages_pages:
                    for stage in stages_page["Parameters"]:
                        pipeline_name = stage["Name"].split("/")[-2]
                        stage_name = stage["Name"].split("/")[-1]
                        if stage["Value"] == "entrypoint":
                            entrypoint = "true"  # not a boolean in dynamodb
                        else:
                            entrypoint = "false"
                        create_dynamodb_pipeline_entry(
                            table, team_name, pipeline_name, stage_name, entrypoint
                        )
                        logger.info(
                            f"{team_name}-{pipeline_name}-{stage_name} DynamoDB Pipeline entry created"
                        )

                  logger.info(
                      "INFO: Entries for stages that no longer exist are *not* removed from DynamoDB"
                  )
              except Exception as e:
                  message = "Function exception: " + str(e)
                  codepipeline.put_job_failure_result(jobId=event["CodePipeline.job"]["id"], failureDetails={"message": message, "type": "JobFailed"})
                  raise

              codepipeline.put_job_success_result(jobId=event["CodePipeline.job"]["id"])
              return "Success"

  rDatasetsDynamodbLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub Creates/updates DynamoDB entries for ${pTeamName} datasets
      FunctionName: !Sub sdlf-${pTeamName}-datasets-dynamodb
      Handler: index.lambda_handler
      MemorySize: 192
      Role: !GetAtt rLambdaCodeBuildTriggerRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          TEAM_NAME: !Ref pTeamName
          ENVIRONMENT: !Ref pEnvironment
      Code:
        ZipFile: |
          import logging
          import os

          import boto3
          import json

          from boto3.dynamodb.types import TypeSerializer

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.client("dynamodb")
          ssm = boto3.client("ssm")
          codepipeline = boto3.client("codepipeline")

          def delete_dynamodb_dataset_entry(table_name, team_name, dataset_name):
              response = dynamodb.delete_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{dataset_name}"}},
              )
              return response

          def create_dynamodb_dataset_entry(table_name, team_name, dataset_name, pipeline_details):
              pipeline_details_dynamodb_json = TypeSerializer().serialize(pipeline_details)
              logger.info("PIPELINE DETAILS DYNAMODB JSON: %s", pipeline_details_dynamodb_json)
              response = dynamodb.update_item(
                  TableName=table_name,
                  Key={"name": {"S": f"{team_name}-{dataset_name}"}},
                  ExpressionAttributeNames={
                      "#P": "pipeline",
                      "#MXIP": "max_items_process",
                      "#MIP": "min_items_process",
                      "#V": "version",
                  },
                  ExpressionAttributeValues={
                      ":p": pipeline_details_dynamodb_json,
                      ":mxip": {"M":{"stage_b": {"N": "100"},"stage_c": {"N": "100"}}}, # todo replace with a nested "pipeline_modifiers" field (half done)
                      ":mip": {"M":{"stage_b": {"N": "1"},"stage_c": {"N": "1"}}},
                      ":v": {"N": "1"},
                  },
                  UpdateExpression="SET #P = :p, #MXIP = :mxip, #MIP = :mip, #V = :v",
                  ReturnValues="UPDATED_NEW",
              )
              return response


          def lambda_handler(event, context):
              try:
                  environment = os.getenv("ENVIRONMENT")
                  team_name = os.getenv("TEAM_NAME")
                  table = f"octagon-Datasets-{environment}"

                  paginator = ssm.get_paginator("get_parameters_by_path")
                  datasets_pages = paginator.paginate(
                      Path=f"/SDLF/Datasets/{team_name}",
                      PaginationConfig={"MaxItems": 30},
                  )

                  for datasets_page in datasets_pages:
                    for dataset in datasets_page["Parameters"]:
                        dataset_name = dataset["Name"].split("/")[-1]
                        logger.info("DATASET SSM CONTENT: %s", dataset["Value"])
                        dataset_pipeline_details = json.loads(dataset["Value"])
                        create_dynamodb_dataset_entry(table, team_name, dataset_name, dataset_pipeline_details)
                        logger.info(
                            f"{team_name}-{dataset_name} DynamoDB Dataset entry created"
                        )

                  logger.info(
                      "INFO: Entries for datasets that no longer exist are not removed from DynamoDB"
                  )
              except Exception as e:
                  message = "Function exception: " + str(e)
                  codepipeline.put_job_failure_result(jobId=event["CodePipeline.job"]["id"], failureDetails={"message": message, "type": "JobFailed"})
                  raise

              codepipeline.put_job_success_result(jobId=event["CodePipeline.job"]["id"])
              return "Success"

  rCICDCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-cicd-codebuild
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-cicd-codebuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-${pTeamName}-states-execution
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/EMR
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
              - Effect: Allow
                Action:
                  - iam:CreateRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-${pTeamName}-*
                Condition:
                  StringEquals:
                    iam:PermissionsBoundary: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/TeamPermissionsBoundary}}"
              - Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-${pTeamName}-*
                Condition:
                  ArnEquals:
                    iam:PolicyARN:
                      - !Sub arn:aws:iam::${AWS::AccountId}:policy/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                  - iam:UntagRole
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                  - iam:TagRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/state-machine/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/glue/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - iam:ListPolicies
                  - iam:ListPolicyVersions
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:policy/*
              - Effect: Allow
                Action:
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:DeletePolicy
                  - iam:DeletePolicyVersion
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:policy/sdlf-${pTeamName}-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:policy/state-machine/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - ssm:AddTagsToResource
                  - ssm:DescribeParameters
                  - ssm:GetOpsSummary
                  - ssm:GetParameter
                  - ssm:GetParameterHistory
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:ListTagsForResource
                  - ssm:RemoveTagsFromResource
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
              - Effect: Allow
                Action:
                  - ssm:DeleteParameter
                  - ssm:DeleteParameters
                  - ssm:PutParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*/${pTeamName}/*
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Pipelines-${pEnvironment}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Datasets-${pEnvironment}
              - Effect: Allow
                Action:
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:DisableRule
                  - events:EnableRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${pCFNBucket}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${pCFNBucket}/*
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetEncryptionConfiguration
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBuckets
                  - s3:ListObjectsV2
                  - s3:PutBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutBucketPolicy
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:PutObject
                  - s3:SetBucketEncryption
                Resource:
                  - !Sub arn:aws:s3:::${pCFNBucket}
                  - !Sub arn:aws:s3:::${pCFNBucket}/*
                  - !Sub arn:aws:s3:::${pArtifactsBucket}
                  - !Sub arn:aws:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:DeleteLogGroup
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:TagLogGroup
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pTeamName}-*:log-stream:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess
                  - lakeformation:GrantPermissions
                  - lakeformation:RevokePermissions
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:AddPermission
                  - sqs:CreateQueue
                  - sqs:ChangeMessageVisibility
                  - sqs:ChangeMessageVisibilityBatch
                  - sqs:DeleteQueue
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                  - sqs:ListQueueTags
                  - sqs:RemovePermission
                  - sqs:SendMessage
                  - sqs:SendMessageBatch
                  - sqs:SetQueueAttributes
                  - sqs:TagQueue
                  - sqs:UntagQueue
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - glue:TagResource
                  - glue:UntagResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - glue:CreateCrawler
                  - glue:DeleteCrawler
                  - glue:GetCrawler
                  - glue:GetCrawlers
                  - glue:UpdateCrawler
                  - glue:StopCrawler
                Resource: !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - glue:CreateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                Resource:
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${pOrganizationName}_${pApplicationName}_${pEnvironment}_${pTeamName}_*
              - Effect: Allow
                Action:
                  - lambda:GetLayerVersion
                  - lambda:ListFunctions
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:CreateAlias
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:DeleteFunctionConcurrency
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:InvokeFunction
                  - lambda:ListTags
                  - lambda:PublishVersion
                  - lambda:PutFunctionConcurrency
                  - lambda:RemovePermission
                  - lambda:TagResource
                  - lambda:UntagResource
                  - lambda:UpdateAlias
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-foundations-rKibana*
              - Effect: Allow
                Action:
                  - lambda:CreateEventSourceMapping
                  - lambda:DeleteEventSourceMapping
                  - lambda:GetEventSourceMapping
                  - lambda:UpdateEventSourceMapping
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:CreateActivity
                  - states:CreateStateMachine
                  - states:ListActivities
                  - states:ListStateMachines
                  - states:TagResource
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - states:DeleteStateMachine
                  - states:DescribeStateMachine
                  - states:DescribeStateMachineForExecution
                  - states:UpdateStateMachine
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - states:DescribeActivity
                  - states:DeleteActivity
                  - states:GetActivityTask
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:activity:sdlf-${pTeamName}-*

  rCodePipelineRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F38
            reason: Condition Applied
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-codepipeline
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-codepipeline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-team-codecommit-${pEnvironment}-${pTeamName}
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt rCICDCloudFormationRole.Arn
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:DeleteLogGroup
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                  - logs:TagLogGroup
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*:log-stream:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pTeamName}-*:log-stream:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetEncryptionConfiguration
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBuckets
                  - s3:ListObjectsV2
                  - s3:PutBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutBucketPolicy
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:PutObject
                  - s3:SetBucketEncryption
                Resource:
                  - !Sub arn:aws:s3:::${pCFNBucket}
                  - !Sub arn:aws:s3:::${pCFNBucket}/*
                  - !Sub arn:aws:s3:::${pArtifactsBucket}
                  - !Sub arn:aws:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"

  rCloudWatchRepositoryTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-cloudwatch-repository-trigger
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-cloudwatch-repository-trigger
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*

  rTeamCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub sdlf-${pTeamName}-cicd-main-${pEnvironment}
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              RoleArn: !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-team-codecommit-${pEnvironment}-${pTeamName}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              OutputArtifacts:
                - Name: TemplateSource
              Configuration:
                RepositoryName: !Ref pTeamMainRepository
                BranchName:
                  !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                PollForSourceChanges: false
              RunOrder: 1
        - Name: DeployPipelinesInfrastructure
          Actions:
            - Name: CreateStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt rCICDCloudFormationRole.Arn
                StackName: !Sub sdlf-${pTeamName}-pipelines-${pEnvironment}
                TemplatePath: !Sub "TemplateSource::pipelines-${pEnvironment}.yaml"
                ParameterOverrides: |
                  {
                    "pPipelineReference" : "#{codepipeline.PipelineExecutionId}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              RunOrder: '1'
            - Name: CreateDynamodbEntry
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref rPipelinesDynamodbLambda
              RunOrder: '2'
        - Name: DeployDatasetsInfrastructure
          Actions:
            - Name: CreateStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt rCICDCloudFormationRole.Arn
                StackName: !Sub sdlf-${pTeamName}-datasets-${pEnvironment}
                TemplatePath: !Sub "TemplateSource::datasets-${pEnvironment}.yaml"
                ParameterOverrides: |
                  {
                    "pPipelineReference" : "#{codepipeline.PipelineExecutionId}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              RunOrder: '1'
            - Name: CreateDynamodbEntry
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref rDatasetsDynamodbLambda
              RunOrder: '2'
      ArtifactStore:
        Type: S3
        EncryptionKey:
          Id: !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"
          Type: KMS
        Location: !Ref pCFNBucket

  rTeamPipelineTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:sdlf-${pTeamName}-main
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${rTeamCodePipeline}
          Id: !Sub sdlf-${pTeamName}-cicd-team-pipeline
          RoleArn: !GetAtt rCloudWatchRepositoryTriggerRole.Arn

  rPullRequestCreated:
    Condition: IsProduction
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub sdlf-pr-created-${pTeamName}
      Description: !Sub Notify ${pTeamName} team of newly created pull request
      EventPattern: !Sub
        - |-
          {
            "detail-type": [
              "CodeCommit Pull Request State Change"
            ],
            "resources": [
              "arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:sdlf-${pTeamName}-datalakeLibrary",
              "arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:sdlf-${pTeamName}-pipLibrary",
              "arn:aws:codecommit:${AWS::Region}:${pSharedDevOpsAccountId}:${pTeamMainRepository}"
            ],
            "source": [
              "aws.codecommit"
            ],
            "detail": {
              "destinationReference": [
                {"prefix":"refs/heads/${cBranch}"},
                {"prefix":"${cBranch}"}
              ],
              "event": [
                "pullRequestCreated"
              ]
            }
          }
        - { cBranch: !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch] }
      State: ENABLED
      Targets:
        - Arn: !Sub "{{resolve:ssm:/SDLF/SNS/${pTeamName}/Notifications}}"
          Id: !Sub sdlf-${pTeamName}-pull-request-created
          InputTransformer:
            InputTemplate: '"<notificationBody>"'
            InputPathsMap:
              notificationBody: $.detail.notificationBody

  rCodePipelineRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/CodePipelineRoleArn
      Type: String
      Value: !GetAtt rCodePipelineRole.Arn
      Description: The ARN of the role used by CodePipeline
  rCloudWatchRepositoryTriggerRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/CloudWatchRepositoryTriggerRoleArn
      Type: String
      Value: !GetAtt rCloudWatchRepositoryTriggerRole.Arn
      Description: The ARN of the CloudWatch Event role that triggers CodePipeline from CodeCommit
Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference