AWSTemplateFormatVersion: "2010-09-09"
Description: CodeBuild project to build CloudFormation modules

Parameters:
  pArtifactsBucket:
    Description: The artifactory bucket used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/DevOpsArtifactsBucket
  pCicdRepository:
    Type: String
    Default: sdlf-cicd

Resources:
  rBuildCloudformationModuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-cicd-build-cfn-module-codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - iam:ListPolicies
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:*
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationManagedUplo-LogAndMetricsDeliveryRol-*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/CloudFormationManagedUploadInfrastructure/*"
              - Effect: Allow
                Action:
                  - cloudformation:RegisterType
                  - cloudformation:SetTypeDefaultVersion
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:type/MODULE/awslabs::sdlf::*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:type/module/awslabs-sdlf-*"
              - Effect: Allow
                Action:
                  - s3:CreateBucket # necessary for CfnUploadInfra stack
                  - s3:PutLifecycleConfiguration # necessary for CfnUploadInfra stack
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetEncryptionConfiguration
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBuckets
                  - s3:ListObjectsV2
                  - s3:PutBucketAcl
                  - s3:PutBucketLogging
                  - s3:PutBucketPolicy
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:PutObject # necessary for cfn submit
                  - s3:SetBucketEncryption
                Resource:
                  - arn:aws:s3:::cloudformationmanageduploadinfra-accesslogsbucket-*
                  - arn:aws:s3:::cloudformationmanageduploadinfrast-artifactbucket-*
              - Effect: Allow
                Action: # TODO CreateKey + d'autres trucs
                  - kms:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeTypeRegistration
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - codecommit:*
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pCicdRepository}"

  rBuildCloudformationModuleStage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: sdlf-cicd-bootstrap-codebuild
      Description: Build a CloudFormation module from Serverless templates
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref pArtifactsBucket
          - Name: MODULE_NAME
            Type: PLAINTEXT
            Value: "sdlfcicddatalake"
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      ServiceRole: !Ref rBuildCloudformationModuleRole
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${pCicdRepository}"
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.9
              commands:
                - |-
                    pip3 uninstall -y aws-sam-cli
                    curl -L -O https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip \
                    && unzip -q aws-sam-cli-linux-x86_64.zip -d sam-installation
                    ./sam-installation/install \
                    && sam --version
                - pip3 install cloudformation-cli
                - aws s3api get-object --bucket "$ARTIFACTS_BUCKET" --key sam-translate.py sam-translate.py
            build:
              commands:
                - sam package --template-file ./sdlf-cicd-datalake/template.yaml --s3-bucket "$ARTIFACTS_BUCKET" --s3-prefix sdlf --output-template-file template.yaml
                - python3 sam-translate.py --template-file=template.yaml --output-template=translated-template.json
                - # aws cloudformation validate-template --template-body file://./translated-template.json
                - |-
                    mkdir module
                    cd module
                    cfn init --artifact-type MODULE --type-name "awslabs::sdlf::$MODULE_NAME::MODULE" && rm fragments/sample.json
                    cp -i -a ../translated-template.json fragments/
                    cfn submit > cfn.log 2>&1
                    if grep "Failed.*CloudFormationManagedUploadInfrastructure.*stack" cfn.log; then
                      aws cloudformation wait stack-create-complete --stack-name "CloudFormationManagedUploadInfrastructure"
                      cfn submit > cfn.log 2>&1
                    fi
                    cat cfn.log
                    TYPE_VERSION_ARN=$(grep "ProgressStatus.*status COMPLETED" cfn.log | tr "'" '"' | jq -r '.TypeVersionArn')
                    echo "registering new cloudformation module version as default: $TYPE_VERSION_ARN"
                    aws cloudformation set-type-default-version --type MODULE --arn "$TYPE_VERSION_ARN" || exit 1
                    echo "done"
                    cd ..
                    rm -Rf module
          artifacts:
            files:
              - "*"
              - "**/*"
      SourceVersion: refs/heads/master
      TimeoutInMinutes: 5