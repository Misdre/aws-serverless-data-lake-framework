AWSTemplateFormatVersion: 2010-09-09
Description: Multi-environment CICD team repos resources in shared DevOps account

Parameters:
  pMainRepository:
    Type: String
    Default: sdlf-main
  pCicdRepository:
    Type: String
    Default: cfn-cicd
  pTeamRepository:
    Type: String
    Default: cfn-team
  pDatalakeAdminMainRepository:
    Type: String
    Default: cfn-main

Mappings:
  pCodeCommitBranch:
    dev:
      branch: dev
    test:
      branch: test
    prod:
      branch: master

Resources:
  ######## IAM #########
  rTeamReposCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:CreateRepository
                  - codecommit:Get*
                  - codecommit:Git*
                  - codecommit:ListRepositories
                  - codecommit:PutRepositoryTriggers
                  - codecommit:UpdateRepositoryDescription
                  - codecommit:UploadArchive
                  - codecommit:AssociateApprovalRuleTemplateWithRepository
                  - codecommit:CreateApprovalRuleTemplate
              - Resource: !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-*main
                Effect: Allow
                Action:
                  - codecommit:CreateRepository
                  - codecommit:TagResource
              - Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:sdlf-repo-notifications-*
                Effect: Allow
                Action:
                  - SNS:GetTopicAttributes
                  - SNS:CreateTopic
                  - SNS:Subscribe
                  - SNS:SetTopicAttributes
                  - SNS:ListSubscriptionsByTopic
              - Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/sdlf-pr-created-*
                Effect: Allow
                Action:
                  - events:DescribeRule
                  - events:DeleteRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
              - Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-cr-sns-topic-endpoints-subscription
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
              - Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-crossaccount-role-*
                Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
                Effect: Allow
                Action:
                  - iam:ListRoles
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-cicd-foundations-eventbus-*
                Effect: Allow
                Action:
                  - iam:PassRole
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-cicd-team-codecommit-*
                Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
              - Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/sdlf-cicd-team-codecommit-*"
                Effect: "Allow"
                Action:
                  - events:DescribeRule
                  - events:DeleteRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
              - Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Misc/*
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters

  rDatalakeAdminCodeCommitRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role assumed by CodeCommit in CodePipeline Source action
      Path: /
      RoleName: sdlf-cicd-datalakeadmin-codecommit
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codecommit.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:Describe*
                  - codecommit:Get*
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:GitPull
                  - codecommit:List*
                  - codecommit:UploadArchive
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pDatalakeAdminMainRepository}

  ######## LAMBDA #########
  rLambdaTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pMainRepository}
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - dev
            - test
            - master
      Targets:
        - Arn: !GetAtt rLambdaCodeBuildTrigger.Arn
          Id: sdlf-cicd-team-repos

  rLambdaCodeBuildTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
                Sid: LogAccessPolicy
              - Action:
                  - codecommit:BatchGetCommits
                  - codecommit:BatchGetCommits
                  - codecommit:GetCommit
                  - codecommit:GetCommitHistory
                  - codecommit:GetDifferences
                  - codecommit:GetObjectIdentifier
                  - codecommit:GetReferences
                  - codecommit:GetTree
                  - codecommit:GetFile
                Effect: Allow
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pMainRepository}
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pCicdRepository}
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${pTeamRepository}
                Sid: CodeCommitRead
              - Action:
                  - events:PutEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:*:event-bus/default
                Sid: CrossAccountEventBus
              - Sid: AllowSSMGet
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Misc/*
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-crossaccount-role-*
              - Effect: Allow
                Action:
                  - cloudformation:ListStacks
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt rTeamReposCodeBuildRole.Arn

  rPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: rLambdaCodeBuildTrigger
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rLambdaTriggerRule.Arn

  rLambdaCodeBuildTrigger:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates crossaccount role for child to access devops codecommit then forwards event to child
      FunctionName: sdlf-team-repos-codebuild-trigger
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt rLambdaCodeBuildTriggerRole.Arn
      Runtime: python3.9
      Timeout: 450
      Environment:
        Variables:
          MAIN_REPOSITORY: !Ref pMainRepository
          CICD_REPOSITORY: !Ref pCicdRepository
          CLOUDFORMATION_ROLE: !GetAtt rTeamReposCodeBuildRole.Arn
      Code:
        ZipFile: |
          import logging
          import os

          import boto3
          from botocore.exceptions import ClientError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          ssm = boto3.client("ssm")
          codecommit = boto3.client("codecommit")
          cloudformation = boto3.client("cloudformation")
          eventbridge = boto3.client("events")


          def delete_team_devops_role_stack(environment, team_name, cloudformation_role):
              stack_name = f"sdlf-crossaccount-role-{environment}-{team_name}"
              cloudformation.delete_stack(
                  StackName=stack_name,
                  RoleARN=cloudformation_role,
              )
              return (stack_name, "stack_delete_complete")


          def create_team_devops_role_stack(environment, team_name, template_body, child_account, cloudformation_role):
              response = {}
              stack_name = f"sdlf-crossaccount-role-{environment}-{team_name}"
              try:
                  response = cloudformation.create_stack(
                      StackName=stack_name,
                      TemplateBody=template_body,
                      Parameters=[
                          {
                              "ParameterKey": "pChildAccountId",
                              "ParameterValue": child_account,
                              "UsePreviousValue": False,
                          },
                          {
                              "ParameterKey": "pEnvironment",
                              "ParameterValue": environment,
                              "UsePreviousValue": False,
                          },
                          {
                              "ParameterKey": "pTeamName",
                              "ParameterValue": team_name,
                              "UsePreviousValue": False,
                          },
                      ],
                      Capabilities=[
                          "CAPABILITY_NAMED_IAM",
                          "CAPABILITY_AUTO_EXPAND",
                      ],
                      RoleARN=cloudformation_role,
                      Tags=[
                          {"Key": "Framework", "Value": "sdlf"},
                      ],
                  )
                  cloudformation_waiter_type = "stack_create_complete"
              except cloudformation.exceptions.AlreadyExistsException:
                  try:
                      response = cloudformation.update_stack(
                          StackName=stack_name,
                          TemplateBody=template_body,
                          Parameters=[
                              {
                                  "ParameterKey": "pChildAccountId",
                                  "ParameterValue": child_account,
                                  "UsePreviousValue": False,
                              },
                              {
                                  "ParameterKey": "pEnvironment",
                                  "ParameterValue": environment,
                                  "UsePreviousValue": False,
                              },
                              {
                                  "ParameterKey": "pTeamName",
                                  "ParameterValue": team_name,
                                  "UsePreviousValue": False,
                              },
                          ],
                          Capabilities=[
                              "CAPABILITY_NAMED_IAM",
                              "CAPABILITY_AUTO_EXPAND",
                          ],
                          RoleARN=cloudformation_role,
                          Tags=[
                              {"Key": "Framework", "Value": "sdlf"},
                          ],
                      )
                      cloudformation_waiter_type = "stack_update_complete"
                  except ClientError as err:
                      if "No updates are to be performed" in err.response["Error"]["Message"]:
                          pass
                      else:
                          raise err

              logger.info("RESPONSE: %s", response)
              return (stack_name, cloudformation_waiter_type)


          def create_codecommit_approval_rule(team_name, repository):
              # unfortunately codecommit approval rule cannot be defined using cloudformation
              try:
                  codecommit.create_approval_rule_template(
                      approvalRuleTemplateName=f"{team_name}-approval-to-production",
                      approvalRuleTemplateContent='{"Version": "2018-11-08","DestinationReferences": ["refs/heads/master"],"Statements": [{"Type": "Approvers","NumberOfApprovalsNeeded": 1}]}',
                  )
                  codecommit.associate_approval_rule_template_with_repository(
                      approvalRuleTemplateName=f"{team_name}-approval-to-production", repositoryName=repository
                  )
              except codecommit.exceptions.ApprovalRuleTemplateNameAlreadyExistsException:
                  pass


          def lambda_handler(event, context):
              logger.info("EVENT: %s", event)
              region = event["region"]
              repo_name = event["detail"]["repositoryName"]
              account_id = event["account"]
              branch_name = event["detail"]["referenceName"]
              codecommit_branch_env_mapping = {"dev": "dev", "test": "test", "master": "prod"}
              environment = codecommit_branch_env_mapping[branch_name]
              logger.info("ENVIRONMENT: %s", environment)
              main_repository = os.getenv("MAIN_REPOSITORY")
              cicd_repository = os.getenv("CICD_REPOSITORY")
              cloudformation_role = os.getenv("CLOUDFORMATION_ROLE")

              child_account = ssm.get_parameter(
                  Name=f"/SDLF/Misc/{environment}/AccountId",
              )[
                  "Parameter"
              ]["Value"]

              template_team_repos = codecommit.get_file(
                  repositoryName=cicd_repository, commitSpecifier=branch_name, filePath="template-team-repos.yaml"
              )

              template_teams = codecommit.get_file(
                  repositoryName=main_repository, commitSpecifier=branch_name, filePath=f"teams-{environment}.yaml"
              )

              # very naive way of getting the list of teams to deploy
              teams = []
              for line in template_teams["fileContent"].decode("utf-8").split("\n"):
                  if "pTeamName:" in line:
                      teams.append(line.split(":", 1)[-1].strip())
              logger.info("TEAMS: %s", teams)

              existing_stacks = cloudformation.list_stacks(
                  StackStatusFilter=["CREATE_COMPLETE", "UPDATE_COMPLETE"]
              )  # pagination would be useful TODO
              existing_teams = [
                  existing_stack["StackName"].removeprefix(f"sdlf-crossaccount-role-{environment}-")
                  for existing_stack in existing_stacks["StackSummaries"]
                  if existing_stack["StackName"].startswith(f"sdlf-crossaccount-role-{environment}-")
              ]

              # remove stacks for teams that are no longer in git
              # note this whole lambda assumes teams aren't defined in files other than teams-{environment}.yaml
              legacy_teams = list(set(existing_teams) - set(teams))
              logger.info("LEGACY TEAMS: %s", legacy_teams)
              cloudformation_waiters = {
                  "stack_delete_complete": [],
              }
              for legacy_team in legacy_teams:
                  stack_details = delete_team_devops_role_stack(environment, legacy_team, cloudformation_role)
                  cloudformation_waiters[stack_details[1]].append(stack_details[0])
                  codecommit.delete_approval_rule_template(approvalRuleTemplateName=f"{team}-approval-to-production")
              cloudformation_waiter = cloudformation.get_waiter("stack_delete_complete")
              for stack in cloudformation_waiters["stack_delete_complete"]:
                  cloudformation_waiter.wait(StackName=stack, WaiterConfig={"Delay": 30, "MaxAttempts": 10})

              # create/update stacks for teams defined in git
              cloudformation_waiters = {"stack_create_complete": [], "stack_update_complete": []}
              for team in teams:
                  stack_details = create_team_devops_role_stack(
                      environment, team, template_team_repos["fileContent"].decode("utf-8"), child_account, cloudformation_role
                  )
                  cloudformation_waiters[stack_details[1]].append(stack_details[0])
                  create_codecommit_approval_rule(team, main_repository)
              cloudformation_create_waiter = cloudformation.get_waiter("stack_create_complete")
              cloudformation_update_waiter = cloudformation.get_waiter("stack_update_complete")
              for stack in cloudformation_waiters["stack_create_complete"]:
                  cloudformation_create_waiter.wait(StackName=stack, WaiterConfig={"Delay": 30, "MaxAttempts": 10})
              for stack in cloudformation_waiters["stack_update_complete"]:
                  cloudformation_update_waiter.wait(StackName=stack, WaiterConfig={"Delay": 30, "MaxAttempts": 10})

              # forward input event as is to the child account event bus
              if child_account != account_id:
                  logger.info("DevOps account and Child account are different, forwarding CodeCommit event to Child account")
                  entries = eventbridge.put_events(
                      Entries=[
                          {
                              "Time": event["time"],
                              "Source": event["source"],
                              "Resources": event["resources"],
                              "DetailType": str(event["detail-type"]),
                              "Detail": event["detail"],
                              "EventBusName": f"arn:aws:events:{event['region']}:{child_account}:event-bus/default",
                          },
                      ],
                  )
              else:
                  logger.info("DevOps account and Child account are identical, exiting")

              return "Success"
