AWSTemplateFormatVersion: "2010-09-09"
Description: Resources to be created to manage a team

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pOrganizationName:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pApplicationName:
    Description: Name of the application
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pApp}}"
  pAnalyticsBucket:
    Description: The analytics bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/AnalyticsBucket}}"
  pCentralBucket:
    Description: The central bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/CentralBucket}}"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pArtifactsBucket:
    Description: The artifactory bucket used by CodeBuild and CodePipeline
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/ArtifactsBucket}}"
  pSNSNotificationsEmail:
    Description: Email address for SNS notifications
    Type: String
    Default: nobody@amazon.com
  pSharedDevOpsAccountId:
    Description: Shared DevOps Account Id
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/DevOpsAccountId}}"
  pStageBucket:
    Description: The stage bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pTeamName:
    Description: Name of the team (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,12}"

Conditions:
  CreateMultipleBuckets:
    !Not [!Equals [!Ref pCentralBucket, !Ref pAnalyticsBucket]]

Resources:
  ######## KMS #########
  rKMSInfraKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: !Sub ${pTeamName} Infrastructure KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pTeamName}-infra-key-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:aws:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service:
                - !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com
          - Sid: Allow Routing Lambda and Shared DevOps access
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-routing
                - !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-team-codecommit-${pEnvironment}-${pTeamName}
            Action:
              - kms:Decrypt
              - kms:Describe*
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:List*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow DevOps account grant
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/sdlf-routing
                - !Sub arn:aws:iam::${pSharedDevOpsAccountId}:role/sdlf-cicd-team-codecommit-${pEnvironment}-${pTeamName}
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: "*"
            Condition:
              Bool:
                kms:GrantIsForAWSResource: true

  rKMSInfraKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/sdlf-${pTeamName}-kms-infra-key
      TargetKeyId: !Ref rKMSInfraKey

  rKMSDataKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      Description: !Sub ${pTeamName} Data KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pTeamName}-data-key-policy
        Statement:
          - Sid: Allow administration of the key
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:aws:iam::${AWS::AccountId}:root"]
            Resource: "*"
          - Sid: Allow Lake Formation permissions
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Effect: Allow
            Principal:
              AWS:
                [
                  !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess",
                ]
            Resource: "*"

  rKMSDataKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/sdlf-${pTeamName}-kms-data-key
      TargetKeyId: !Ref rKMSDataKey

  rGlueSecurityConfiguration:
    Type: AWS::Glue::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pTeamName}-glue-security-config
      EncryptionConfiguration:
        CloudWatchEncryption:
          CloudWatchEncryptionMode: SSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        JobBookmarksEncryption:
          JobBookmarksEncryptionMode: CSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        S3Encryptions:
          - S3EncryptionMode: SSE-KMS
            KmsKeyArn: !GetAtt rKMSDataKey.Arn

  rEMRSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pTeamName}-emr-security-config
      SecurityConfiguration: !Sub |
        {
          "EncryptionConfiguration": {
            "EnableInTransitEncryption" : false,
            "EnableAtRestEncryption" : true,
            "AtRestEncryptionConfiguration" : {
              "S3EncryptionConfiguration" : {
                "EncryptionMode" : "SSE-KMS",
                "AwsKmsKey": "${rKMSDataKey}"
              },
              "LocalDiskEncryptionConfiguration" : {
                "EncryptionKeyProviderType" : "AwsKms",
                "AwsKmsKey" : "${rKMSDataKey}",
                "EnableEbsEncryption" : true
              }
            }
          },
          "InstanceMetadataServiceConfiguration":{
            "MinimumInstanceMetadataServiceVersion": 2,
            "HttpPutResponseHopLimit": 1
          }
        }

  ######## SSM #########
  rKMSInfraKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/KMS/${pTeamName}/InfraKeyId
      Type: String
      Value: !GetAtt rKMSInfraKey.Arn
      Description: !Sub Arn of the ${pTeamName} KMS infrastructure key
  rKMSDataKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/KMS/${pTeamName}/DataKeyId
      Type: String
      Value: !GetAtt rKMSDataKey.Arn
      Description: !Sub Arn of the ${pTeamName} KMS data key

  #### END KMS STACK

  ######## IAM #########
  rTeamIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F5
            reason: Condition Applied
    Properties:
      ManagedPolicyName: !Sub sdlf-${pTeamName}-permissions-boundary
      Description: Team Permissions Boundary IAM policy. Add/remove permissions based on company policy and associate it to federated role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowConsoleListBuckets
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Resource: arn:aws:s3:::*
          - Sid: AllowTeamBucketList
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              [
                !Sub "arn:aws:s3:::${pArtifactsBucket}",
                !Sub "arn:aws:s3:::${pCentralBucket}",
                !Sub "arn:aws:s3:::${pStageBucket}",
                !Sub "arn:aws:s3:::${pAnalyticsBucket}",
              ]
          - Sid: AllowTeamPrefixActions
            Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${pArtifactsBucket}/${pTeamName}/*
              - !If [
                  CreateMultipleBuckets,
                  !Sub "arn:aws:s3:::${pCentralBucket}/${pTeamName}/*",
                  !Sub "arn:aws:s3:::${pCentralBucket}/raw/${pTeamName}/*",
                ]
              - !Sub arn:aws:s3:::${pStageBucket}/${pTeamName}/*
              - !Sub arn:aws:s3:::${pStageBucket}/pre-stage/${pTeamName}/*
              - !Sub arn:aws:s3:::${pStageBucket}/stage/${pTeamName}/*
              - !Sub arn:aws:s3:::${pStageBucket}/post-stage/${pTeamName}/*
              - !If [
                  CreateMultipleBuckets,
                  !Sub "arn:aws:s3:::${pAnalyticsBucket}/${pTeamName}/*",
                  !Sub "arn:aws:s3:::${pAnalyticsBucket}/analytics/${pTeamName}/*",
                ]
          - Sid: AllowFullCodeCommitOnTeamRepositories
            Effect: Allow
            Action:
              - codecommit:*
            Resource:
              - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
          - Sid: AllowTeamKMSDataKeyUsage
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !GetAtt rKMSDataKey.Arn
              - !GetAtt rKMSInfraKey.Arn
          - Sid: AllowSSMGet
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Sid: AllowOctagonDynamoAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Sid: AllowSQSManagement
            Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ListQueues
              - sqs:ListDeadLetterSourceQueues
              - sqs:ListQueueTags
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - glue:StartCrawler
            Resource:
              - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - glue:GetJobRun
              - glue:GetJobRuns
              - glue:StartJobRun
            Resource:
              - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/sdlf-${pTeamName}-*
              - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/${pOrganizationName}-${pApplicationName}-${pEnvironment}-${pTeamName}-*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Sid: AllowCloudWatchLogsReadOnlyAccess
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pTeamName}-*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/jobs/sdlf-${pTeamName}-*
          - Sid: AllowCloudFormationReadOnlyAccess
            Effect: Allow
            Action:
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStackResources
            Resource:
              - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack:sdlf-${pTeamName}:*

  rStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-states-execution
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-states-execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:StopExecution
                Resource: "*"
              - Effect: Allow
                Action:
                  - events:DescribeRule
                  - events:PutRule
                  - events:PutTargets
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
              - Effect: Allow
                Action:
                  - elasticmapreduce:DescribeCluster
                  - elasticmapreduce:RunJobFlow
                  - elasticmapreduce:TerminateJobFlows
                Resource: "*"
              - Effect: Allow
                Action:
                  - elasticmapreduce:AddJobFlowSteps
                  - elasticmapreduce:CancelSteps
                  - elasticmapreduce:DescribeStep
                  - elasticmapreduce:ListInstanceFleets
                  - elasticmapreduce:ListInstanceGroups
                  - elasticmapreduce:ModifyInstanceFleet
                  - elasticmapreduce:ModifyInstanceGroups
                  - elasticmapreduce:SetTerminationProtection
                Resource: !Sub arn:aws:elasticmapreduce:${AWS::Region}:${AWS::AccountId}:cluster/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/EMR*
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - iam:PutRolePolicy
                  - iam:UpdateRoleDescription
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/elasticmapreduce.amazonaws.com/AWSServiceRoleForEMRCleanup*
                Condition:
                  StringLike:
                    iam:AWSServiceName: elasticmapreduce.amazonaws.com
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: "*"

  rRoleCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-cloudwatch-event
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-trigger-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:ListFunctions
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}-*
        - PolicyName: !Sub sdlf-${pTeamName}-describe-state-machines
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:ListStateMachines
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:*
        - PolicyName: !Sub sdlf-${pTeamName}-dataset-state-machine
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:DescribeStateMachineForExecution
                  - states:DescribeStateMachine
                  - states:StartExecution
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub arn:aws:s3:::${pArtifactsBucket}
                  - !Sub arn:aws:s3:::${pCentralBucket}
                  - !Sub arn:aws:s3:::${pStageBucket}
                  - !Sub arn:aws:s3:::${pAnalyticsBucket}

  rDatalakeCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-datalake-crawler
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-glue-crawler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:ListAllMyBuckets
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                Resource: arn:aws:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::aws-glue-*/*
                  - arn:aws:s3:::*/*aws-glue-*/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - arn:aws:s3:::crawler-public*
                  - arn:aws:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:ListObjectsV2
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:PutObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::${pCentralBucket}/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pCentralBucket}/raw/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pStageBucket}/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pStageBucket}/stage/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pStageBucket}/pre-stage/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pStageBucket}/post-stage/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pAnalyticsBucket}/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pAnalyticsBucket}/analytics/${pTeamName}/*
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:CreateGrant
                Resource:
                  - !GetAtt rKMSInfraKey.Arn
                  - !GetAtt rKMSDataKey.Arn

  ####### SSM #######
  rTeamIAMManagedPolicySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/TeamPermissionsBoundary
      Type: String
      Value: !Ref rTeamIAMManagedPolicy
      Description: The permissions boundary IAM Managed policy for the team
  rCloudWatchEventStateMachineRoleNameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/CloudWatchEventStateMachineRole
      Type: String
      Value: !Ref rRoleCloudWatchEventRole
      Description: The name of the CloudWatch Event role that triggers the State Machines
  rStatesExecutionRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/StatesExecutionRoleArn
      Type: String
      Value: !GetAtt rStatesExecutionRole.Arn
      Description: The ARN of the States Execution role
  rDatalakeCrawlerRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/CrawlerRoleArn
      Type: String
      Value: !GetAtt rDatalakeCrawlerRole.Arn
      Description: The ARN of the Crawler role

  ######## CICD #########
  ######## SNS #########
  rSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub sdlf-${pTeamName}-notifications
      KmsMasterKeyId: !GetAtt rKMSInfraKey.Arn

  rSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub sdlf-${pTeamName}-notifications
        Version: "2012-10-17"
        Statement:
          - Sid: !Sub sdlf-${pTeamName}-notifications
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref rSNSTopic
      Topics:
        - !Ref rSNSTopic

  ######## SSM #########
  rSNSTopicSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/SNS/${pTeamName}/Notifications
      Type: String
      Value: !Ref rSNSTopic
      Description: The ARN of the team-specific SNS Topic

  ######## LAKEFORMATION PERMISSIONS #########
  rCentralTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:aws:s3:::${pCentralBucket}/${pTeamName}/",
              !Sub "arn:aws:s3:::${pCentralBucket}/raw/${pTeamName}/",
            ]

  rStagePreTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:aws:s3:::${pStageBucket}/pre-stage/${pTeamName}/",
              !Sub "arn:aws:s3:::${pCentralBucket}/pre-stage/${pTeamName}/",
            ]

  rStagePostTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:aws:s3:::${pStageBucket}/post-stage/${pTeamName}/",
              !Sub "arn:aws:s3:::${pCentralBucket}/post-stage/${pTeamName}/",
            ]

  rAnalyticsTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource:
            !If [
              CreateMultipleBuckets,
              !Sub "arn:aws:s3:::${pAnalyticsBucket}/${pTeamName}/",
              !Sub "arn:aws:s3:::${pCentralBucket}/analytics/${pTeamName}/",
            ]

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference